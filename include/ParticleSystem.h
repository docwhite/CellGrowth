////////////////////////////////////////////////////////////////////////////////
/// @file ParticleSystem.h
/// @author Carola Gille
/// @author Ramon Blanquer
/// @version 0.0.1
////////////////////////////////////////////////////////////////////////////////
#ifndef PARTICLESYSTEM_H
#define PARTICLESYSTEM_H

// Native
#include <vector>

// Custom
#include "LinkedParticle.h"
#include "GrowthParticle.h"
#include "PointLight.h"

////////////////////////////////////////////////////////////////////////////////
/// @class ParticleSystem
/// @brief Wraps particle system functionality.
///
/// This class will be having large numbers of particles. It will be contained
/// under a Scene. The scene will make the ParticleSystem advance(). The
/// packageDataForDrawing() will prepare all the particle data for the client
/// application to be able to draw it.
////////////////////////////////////////////////////////////////////////////////
class ParticleSystem
{
public:

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Constructor.
  //////////////////////////////////////////////////////////////////////////////
  ParticleSystem();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Constructor.
  /// @param[in] _particleType Type of particle that the particle system is
  /// filled with.
  //////////////////////////////////////////////////////////////////////////////
  ParticleSystem(char _particleType);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Steps all the particles in the system .
  //////////////////////////////////////////////////////////////////////////////
  void advance();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Populates the system with this amount of particles.
  /// @param[in] _amount Number of particles to initialize the system with.
  //////////////////////////////////////////////////////////////////////////////
  void fill(unsigned int _amount);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Retrieves the particle at that index, returns a pointer.
  /// @param[in] _idx Index of the particle we want to get.
  /// @returns The particle object.
  //////////////////////////////////////////////////////////////////////////////
  Particle* getParticle(unsigned int _idx);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Get the number of particles in the system
  /// @returns Number of particles in the system.
  //////////////////////////////////////////////////////////////////////////////
  unsigned int getSize();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Gets the nearest particle to the point light
  /// @returns Index of nearest particle to point light
  //////////////////////////////////////////////////////////////////////////////
  unsigned int getNearestParticle();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Selects a particle randomly and splits it. Useful for debugging.
  //////////////////////////////////////////////////////////////////////////////
  void splitRandomParticle();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief This will delete a particle and all the connections to it.
  /// @param[in] _idx Index of the particle to remove.
  //////////////////////////////////////////////////////////////////////////////
  void deleteParticle(unsigned int _idx);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Populates an OpenGL-friendly flat vector of floats that will be
  /// used for drawing them.
  /// @param[out] _packagedData Flat array that will be populated.
  //////////////////////////////////////////////////////////////////////////////
  void packageDataForDrawing(std::vector<float> &_packagedData);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Populates a list of three dimensional vectors that will be used
  /// for debug-drawing the links.
  /// @param[out] _returnList Vector to populate.
  //////////////////////////////////////////////////////////////////////////////
  void getLinksForDraw(std::vector<uint> &_returnList);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Calculates the average position of all particles to use as
  /// their centre. Returns this position as a vector.
  //////////////////////////////////////////////////////////////////////////////
  QVector3D calculateParticleCentre();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Calculates the average distance from centre to particles.
  /// @param[out] Returns this distance.
  //////////////////////////////////////////////////////////////////////////////
  QVector3D calculateAverageDistanceFromCentre();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief This will delete a particle and all the connections to it.
  /// @param[in] _idx Index of the particle to remove.
  //////////////////////////////////////////////////////////////////////////////
  void setParticleSize(double _size);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Changes state if m_forces.
  /// @param[in] State that forces are set t.
  //////////////////////////////////////////////////////////////////////////////
  void toggleForces(bool _state);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Changes state if m_particleDeath
  /// @param[in] State that forces are set to
  //////////////////////////////////////////////////////////////////////////////
  void toggleParticleDeath (bool _state);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Sets Cohesion Value.
  /// @param[in] _amount new Cohesion amount.
  //////////////////////////////////////////////////////////////////////////////
  void setCohesion(int _amount);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Sets Bulge amount.
  /// @param[in] _amount new Bulge amount.
  //////////////////////////////////////////////////////////////////////////////
  void bulge();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Sets localCohesion amount.
  /// @param[in] _amount new localCohesion amount.
  //////////////////////////////////////////////////////////////////////////////
  void setLocalCohesion(int _amount);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Sets point light position.
  /// @param[in] _x New x position of the point light
  /// @param[in] _y New y position of the point light
  /// @param[in] _z New z position of the point light
  //////////////////////////////////////////////////////////////////////////////
  void setLightPos(QVector3D _lightPos);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Sets the branch length for Growth Particles.
  /// @param[in] _amount length of a branch.
  //////////////////////////////////////////////////////////////////////////////
  void setBranchLength(float _amount);

  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Resets all values in the particle system.
  /// @param[in] _particleType Type of particle the particle system is gonna be
  /// filled with.
  //////////////////////////////////////////////////////////////////////////////
  void reset(char _particleType);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Sets the child threshold for Growth Particles.
  /// @param[in] _value amount of children per particle.
  //////////////////////////////////////////////////////////////////////////////
  void setChildThreshold(int _value);


private:

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Stores the lentgh of a branch for GrwothParticles
  //////////////////////////////////////////////////////////////////////////////
  float m_branchLength;


  //////////////////////////////////////////////////////////////////////////////
  /// @brief Stores the state of the forces
  //////////////////////////////////////////////////////////////////////////////
  bool m_forces;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Stores the state of particle death
  //////////////////////////////////////////////////////////////////////////////
  bool m_particleDeath;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Stores the amount of cohesion in percentage
  //////////////////////////////////////////////////////////////////////////////
  int m_cohesion;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Stores the amount of local cohesion in percentage
  //////////////////////////////////////////////////////////////////////////////
  int m_localCohesion;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Stores the particle Type like a flag,
  /// G stands for GrowthParticle
  /// L stands for LinkedParticle
  //////////////////////////////////////////////////////////////////////////////
  char m_particleType;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Stores the list of particles in the system.
  //////////////////////////////////////////////////////////////////////////////
  std::vector<std::unique_ptr<Particle>> m_particles;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Keeps track of the number of particles.
  //////////////////////////////////////////////////////////////////////////////
  unsigned int m_particleCount;

  /////////////////////////////////////////////////////////////////////////////
  /// @brief m_rd random device for LinkedParticle calculations
  /////////////////////////////////////////////////////////////////////////////
  std::random_device m_rd;

  /////////////////////////////////////////////////////////////////////////////
  /// @brief m_gen random generator for LinkedParticl calculations
  /////////////////////////////////////////////////////////////////////////////
  std::mt19937_64 m_gen;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Holds the average position of all the particles in the system.
  //////////////////////////////////////////////////////////////////////////////
  QVector3D m_particleCentre;

  /////////////////////////////////////////////////////////////////////////////
  /// @brief Holds the position for average distance.
  //////////////////////////////////////////////////////////////////////////////
  QVector3D m_averageDistance;

  ////////////////////////////////////////////////////////////////////////////
  /// @brief m_lightPos stores the position of the light
  ////////////////////////////////////////////////////////////////////////////
  QVector3D m_lightPos;

  ////////////////////////////////////////////////////////////////////////////
  /// @brief m_currentParticleSize stores size of particles
  ////////////////////////////////////////////////////////////////////////////
  float m_currentParticleSize;



};

#endif // PARTICLESYSTEM_H
