#ifndef QUAD_H
#define QUAD_H

// Qt
#include <QObject>
#include <QVector3D>
#include <QVector2D>
#include <QOpenGLBuffer>
#include <QOpenGLShaderProgram>
#include <QOpenGLVertexArrayObject>

////////////////////////////////////////////////////////////////////////////////
/// @file Quad.h
/// @author Ramon Blanquer
/// @version 0.0.1
/// @class Quad
/// @brief Screen Quad where the deferred rendering will happen
////////////////////////////////////////////////////////////////////////////////
class Quad : public QObject
{

public:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Constructor
  //////////////////////////////////////////////////////////////////////////////
  Quad(QObject *parent = 0);
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Destructor
  //////////////////////////////////////////////////////////////////////////////
  ~Quad();
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Prepares all the vertex data, VAO, shaders and attribute pointers
  //////////////////////////////////////////////////////////////////////////////
  void prepare();
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Gets called everytime we want to draw the Quad
  //////////////////////////////////////////////////////////////////////////////
  void draw();

private:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Shader program used for rendering the Quad
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLShaderProgram *m_program;
  //////////////////////////////////////////////////////////////////////////////
  /// @brief VAO that will store the state for drawing the Quad
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLVertexArrayObject *m_vao;

};

#endif // SCENE_H
