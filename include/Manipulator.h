////////////////////////////////////////////////////////////////////////////////
/// @file Manipulator.h
/// @author Glenn Nygard
/// @version 0.0.1
/// @brief Class responsible for createing and displaying the object
/// manipulator. Universal class that can be used with any object in the scene
/// that needs 3d movement and rotation.
////////////////////////////////////////////////////////////////////////////////

#ifndef MANIPULATOR_H
#define MANIPULATOR_H

// Qt
#include <QVector3D>
#include <QtMath>

// OpenGL
#include <QOpenGLBuffer>
#include <QOpenGLShaderProgram>
#include <QOpenGLVertexArrayObject>


//////////////////////////////////////////////////////////////////////////////
/// @brief The scene X direction
//////////////////////////////////////////////////////////////////////////////
const int DIRECTION_X = 0;

//////////////////////////////////////////////////////////////////////////////
/// @brief The scene Y direction
//////////////////////////////////////////////////////////////////////////////
const int DIRECTION_Y = 1;

//////////////////////////////////////////////////////////////////////////////
/// @brief The scene Z direction
//////////////////////////////////////////////////////////////////////////////
const int DIRECTION_Z = 2;

//////////////////////////////////////////////////////////////////////////////
/// @brief Rotation around scene X
//////////////////////////////////////////////////////////////////////////////
const int ROTATION_X = 3;

//////////////////////////////////////////////////////////////////////////////
/// @brief Rotation around scene Y
//////////////////////////////////////////////////////////////////////////////
const int ROTATION_Y = 4;

//////////////////////////////////////////////////////////////////////////////
/// @brief Rotation around scene Z
//////////////////////////////////////////////////////////////////////////////
const int ROTATION_Z = 5;


////////////////////////////////////////////////////////////////////////////////
/// @brief Struct storing the individual data for each manipulator arrow.
////////////////////////////////////////////////////////////////////////////////
struct Geo {
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Is the arrow currently clicked.
  //////////////////////////////////////////////////////////////////////////////
  bool clicked;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief What axis does the arrow originally point down.
  //////////////////////////////////////////////////////////////////////////////
  int axis;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Number of vertices that make up the arrow object.
  //////////////////////////////////////////////////////////////////////////////
  uint numberOfPoints=0;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Arrow unique colour.
  //////////////////////////////////////////////////////////////////////////////
  QVector3D uniqueColour;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Arrow render colour. The actual colour of the arrow.
  //////////////////////////////////////////////////////////////////////////////
  QVector3D renderColour;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Arrow VBO.
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLBuffer *vbo;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Arrow VAO.
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLVertexArrayObject *vao;
};

////////////////////////////////////////////////////////////////////////////////
/// @class Manipulator
/// @brief The handles used for moving objects around in the scene. Can be
/// used by any object that needs to be moved around.
////////////////////////////////////////////////////////////////////////////////
class Manipulator
{

public:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Constructor taking position and the shaderprogram to be used for
  /// the manipulator.
  /// @param[in] _position Position of the manipulator.
  /// @param[in] _lightProgram !!!MISSING
  //////////////////////////////////////////////////////////////////////////////
  explicit Manipulator (QVector3D _position, QOpenGLShaderProgram *_lightProgram);

  ~Manipulator();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Compares the given colour with the unique colour of each arrow in
  /// manipulator.
  /// @param[in] _colour Colour to be compared
  //////////////////////////////////////////////////////////////////////////////
  int compareUniqueColour(QVector3D _colour);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Creates the manipulator geometry.
  /// @param[in] _uColourVec Vector of unique colours to be assigned to the
  /// manipulator arrows.
  /// @param[in] _coneangle A white circle is made in front of the manipulator
  /// to show the objects influence on the scene.
  //////////////////////////////////////////////////////////////////////////////
  void createGeometry(std::vector<QVector3D> _uColourVec,
                      GLfloat _coneangle);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Draws the manipulator to the main buffer.
  //////////////////////////////////////////////////////////////////////////////
  void draw();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Draws the manipulator to a temporary buffer, using manipulators
  /// unique colours.
  //////////////////////////////////////////////////////////////////////////////
  void drawBackBuffer();


  //////////////////////////////////////////////////////////////////////////////
  /// @brief Sets the manipulator arrows to clicked/not clicked.
  /// @param[in] _uColourIdentity Unique colour that has been clicked.
  /// @param[in] _state Boolean stating wether it is being run from mouse click
  /// or release. If the latter clicked should always be set to false.
  //////////////////////////////////////////////////////////////////////////////
  void setClicked(QVector3D _uColourIdentity, bool _state);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Changes the colour of the manipulator arrows if the mouse is
  /// hovering over them.
  /// @param[in] _axis Specifies which axis is being affected.
  //////////////////////////////////////////////////////////////////////////////
  void setHover(int _axis);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Returns all arrows in the arrow vector.
  /// @param[out] _arrows Vector where to write the arrows.
  //////////////////////////////////////////////////////////////////////////////
  void getArrows(std::vector<Geo> &_arrows);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Returns the currently clicked arrow.
  /// @returns The arrow/axis currently being manipulated.
  //////////////////////////////////////////////////////////////////////////////
  int getClickedAxis();

private:

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Creates a circle around a given axis and returns its vertices.
  /// @param[in] _segments A larger amount of segments creates a smoother circle.
  /// @param[in] _thickness Greatly chnages how visible and easy to click the
  /// circle is.
  /// @param[in] _r The distance (radius) of the circle from the op point.
  /// @param[in] _axis Axis around the circle is made. Use ROTATION_X, ROTATION_Y
  ///  or ROTATION_Z.
  /// @param[in] _numb If more than one circle is needed, you can enter either
  /// 0 or 1.
  /// @param[in] _op The point the circle should be made around. Should usually
  /// be origin (0,0,0).
  /// @param[out] _vertices A vector of all the vertex positions.
  //////////////////////////////////////////////////////////////////////////////
  void createSingleCircle(
      uint _segments,
      float _thickness,
      float _r,
      int _axis,
      int _numb,
      QVector3D _op,
      std::vector<QVector3D> &_vertices);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Creates and sets up the vbo for the circle object
  /// @param[in] _vertices Vertices being set to the VBO
  /// @param[out] _circle The circle struct after the vbo has been added to it.
  //////////////////////////////////////////////////////////////////////////////
  void setupRotCircleVBO(std::vector<QVector3D> _vertices,
      Geo &_circle);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Creates and sets up the vao for the provided arrow object
  /// @param[out] _circle The circle struct after the vbo has been added to it.
  /// @param[in] _vao The initialised vao to be set up.
  //////////////////////////////////////////////////////////////////////////////
  void setupRotCircleVAO(Geo &_circle, QOpenGLVertexArrayObject *_vao);


  //////////////////////////////////////////////////////////////////////////////
  /// @brief Function to create the geometry for the rotation circles.
  /// @param[in] *_vao Circle VAO.
  /// @param[in] _uniqueColour A unique colour to identify the new circle when
  /// when calculating click detection.
  /// @param[in] _axis The axis of the circle to be created
  /// (rotate around the Y or Z axis).
  //////////////////////////////////////////////////////////////////////////////
  void createRotCircle(QOpenGLVertexArrayObject *_vao,
                       QVector3D _uniqueColour,
                       int _axis);


  //////////////////////////////////////////////////////////////////////////////
  /// @brief Function to create the geometry for the light cone, and add it to
  /// a new VAO and VBO. This logic is kept as one function because of its
  /// relatively short length.
  /// @param[in] _coneangle The size of the area to be affected by the light
  /// in degrees.
  //////////////////////////////////////////////////////////////////////////////
  void createLightConeCircle(GLfloat _coneangle);


  //////////////////////////////////////////////////////////////////////////////
  /// @brief Creates and sets up the vbo for the provided arrow object
  /// @param[in] _vertices Vertices being set to the VBO
  /// @param[in] _normals Normals being set to the VBO
  /// @param[out] _arrow The arrow struct after the vbo has been added to it.
  //////////////////////////////////////////////////////////////////////////////
  void setupVBO(
      std::vector<QVector3D> _vertices,
      std::vector<QVector3D> _normals,
      Geo &_arrow);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Creates and sets up the vao for the provided arrow object
  /// @param[out] _arrow The arrow struct after the vbo has been added to it.
  /// @param[in] _vao The initialised vao to be set up.
  //////////////////////////////////////////////////////////////////////////////
  void setupVAO(Geo &_arrow, QOpenGLVertexArrayObject *_vao);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Creates an arrow. Changes the colour of the manipulator arrows if
  /// the mouse is hovering over them
  /// @param[in] _vao VAO being used to create arrow.
  /// @param[in] _offsetPos Position of the created arrow.
  /// @param[in] _uniqueColour the unique colour assigned to the arrow.
  /// @param[in] _axis Axis assigned to the arrow.
  //////////////////////////////////////////////////////////////////////////////
  void createArrow(
      QOpenGLVertexArrayObject *_vao,
      QVector3D _offsetPos,
      QVector3D _uniqueColour,
      int _axis);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Manipulator position
  //////////////////////////////////////////////////////////////////////////////
  QVector3D m_position;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Manipulator shader program
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLShaderProgram *m_manipshaderp;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Vector storing the arrows
  //////////////////////////////////////////////////////////////////////////////
  std::vector<Geo> m_arrows;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Vector storing the rotation circles.
  //////////////////////////////////////////////////////////////////////////////
  std::vector<Geo> m_circles;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Struct storing the cone light circle. This represents the max
  /// light angle.
  //////////////////////////////////////////////////////////////////////////////
  Geo m_coneCircle;

};


#endif
