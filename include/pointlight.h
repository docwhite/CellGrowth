// HEADER FILE ONLY


// Private
#include "selectobject.h"
#include "manipulator.h"

////////////////////////////////////////////////////////////////////////////////////
/// @file pointlight.h
/// @author Glenn Nygard
/// @version 0.0.1
/// @class PointLight
/// @brief Deals with inputs, and diverts them to the appropriate classes.
///
/// Point light class. Stores functions and parameters related to the scene lights.
////////////////////////////////////////////////////////////////////////////////////
///
// DEFAULT VALUES
const QVector3D    POSITION         = QVector3D(0,0,0);
const QVector3D    LIGHT_COLOUR     = QVector3D(0.8f,0.8f,0.8f);

class PointLight : public SelectObject
{
public:
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Custom constructor.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  PointLight(QVector3D _position, QOpenGLShaderProgram *_manipshaderp, QOpenGLShaderProgram *_sunshaderp) :
      manip(_position, _manipshaderp)
  {
      position=_position;
      sunshaderp=_sunshaderp;
      manipshaderp=_manipshaderp;
      // Set light representation position (single point)
      points[0]=_position.x(); points[1]=_position.y(); points[2]=_position.z();
      updateModelMatrix(0,0,0);
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Compare a unique colour with custom object unique colour
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  int compareUniqueColour(QVector3D _colour) override
  {
      return manip.compareUniqueColour(_colour);

  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Create light geometry.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void createGeometry(QOpenGLContext *context, QVector3D &masterUniqueColour) override
  {
      // Setup light representation VBO VAO
      setupObject(context);
      // Setup manipulator geometry
      int amountOfColours=3;
      manip.createGeometry(context, getMultipleNewUniqueColour(amountOfColours, masterUniqueColour));

  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Draw light object to main buffer.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void draw() override
  {
      // LIGHT
      vao->bind();
      sunshaderp->bind();
      GLint modelLoc = sunshaderp->uniformLocation("model");
      sunshaderp->setUniformValue(modelLoc, model);
      // Setup/Draw
      glEnable(GL_POINT_SPRITE);
      glPointSize(22.0f);
      glDrawArrays(GL_POINTS, 0, 1);
      // Release and reset everything
      sunshaderp->release();
      vao->release();
      glDisable(GL_POINT_SPRITE);
      glPointSize(0.0f);

      // MANIPULATOR
      manipshaderp->bind();
      modelLoc = manipshaderp->uniformLocation("model");
      manipshaderp->setUniformValue(modelLoc, model);
      // Draw manipulator
      manip.draw();


  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Draw light object to back buffer using the object unique colour.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void drawBackBuffer() override
  {
      manipshaderp->bind();
      GLint modelLoc = manipshaderp->uniformLocation("model");
      manipshaderp->setUniformValue(modelLoc, model);
      manip.drawBackBuffer();

  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Process mouse movements.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void processMouseMovement(float offsetx, float offsety, float offsetz) override
  {
      updateModelMatrix(offsetx, offsety, offsetz);
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Set object as clicked.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void setClicked(QVector3D uColour, bool state) override
  {
      manip.setClicked(uColour, state);

  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Mark the object as being under the mouse cursor.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void setHover(int id) override
  {
      manip.setHover(id);

  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Returns light position.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QVector3D getPosition() override { return position; }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Returns light object manipulator.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Manipulator getManipulator() { return manip; }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Returns main light shader program.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void getMainProgram(QOpenGLShaderProgram **retshader) { *retshader=manipshaderp; }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Initialises VBO/VAO of light object.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void setupObject(QOpenGLContext *_context_)
  {

      // VAO / VBO
      vao = new QOpenGLVertexArrayObject(_context_);
      vao->create();
      vao->bind();
      vbo = new QOpenGLBuffer(QOpenGLBuffer::VertexBuffer);
      vbo->create();
      vbo->bind();
      vbo->setUsagePattern(QOpenGLBuffer::StaticDraw); //Previoulsy DynamicDraw
      vbo->allocate(&points[0], 3* sizeof(GLfloat)); // Allocate enogh place for all data
      // Set shader attributes
      sunshaderp->setAttributeBuffer("posAttr", GL_FLOAT, 0, 3);
      sunshaderp->enableAttributeArray("posAttr");

      vao->release();




  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Updates the light model matrix for use with the camera.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void updateModelMatrix(float offsetx, float offsety, float offsetz)
  {
      QVector3D pointPos=position;
      model.setToIdentity();
      model.translate(pointPos);
      GLfloat angle = 0.0f;
      model.rotate(angle, QVector3D(1,0.3,0.5));
      position=manip.processMouseMovement(offsetx, offsety, offsetz, position);

  }




private:
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Light manipulator.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Manipulator manip;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Light position.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QVector3D position;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Light VBO.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QOpenGLBuffer* vbo;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Light VAO.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QOpenGLVertexArrayObject *vao;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Stores the light representation position (the little icon indicating the light).
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  GLfloat points[3];

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Light representation shader program.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QOpenGLShaderProgram *sunshaderp;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Manipulator shader program.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QOpenGLShaderProgram *manipshaderp;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Light model matrix.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QMatrix4x4 model;



};
