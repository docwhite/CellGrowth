////////////////////////////////////////////////////////////////////////////////
/// @file SkyBox.h
/// @author Fanny Marstrom
/// @author Ramon Blanquer
/// @version 0.0.1
////////////////////////////////////////////////////////////////////////////////
/// Source:
/// Gerdelan, A., 2016. Cube Maps: Skyboxes and Environment Mapping. [online]
/// Antongerdelan.net. Available from: http://antongerdelan.net/opengl/cubemaps.html
/// [Accessed 13 Apr. 2017].
///////////////////////////////////////////////////////////////////////////////

#ifndef SKYBOX_H
#define SKYBOX_H

// Qt
#include <QOpenGLBuffer>
#include <QOpenGLFramebufferObject>
#include <QOpenGLShaderProgram>
#include <QOpenGLTexture>
#include <QOpenGLVertexArrayObject>
#include <QOpenGLFunctions_4_1_Core>

// Project
#include "InputManager.h"

////////////////////////////////////////////////////////////////////////////////
/// @class SkyBox
/// @brief Wraps all the code related to the sky environment.
////////////////////////////////////////////////////////////////////////////////
class SkyBox
{

public:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Constructor.
  /// @param _input_manager InputManager to pair the SkyBox with.
  //////////////////////////////////////////////////////////////////////////////
  SkyBox(InputManager *_input_manager);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Destructor.
  //////////////////////////////////////////////////////////////////////////////
  ~SkyBox();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Changes the skybox map.
  /// \param _name Name of the skybox from the resource file.
  //////////////////////////////////////////////////////////////////////////////
  void setBackground(QString _name);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief How many iterations to blur the image.
  /// \param _value Number of iterations.
  //////////////////////////////////////////////////////////////////////////////
  void setBlurIterations(uint _value);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Sets up the pipeline of textures and FBOs for the sky map.
  /// @param _width Width of the viewport.
  /// @param _height Height of the viewport.
  /// @param _funcs OpenGL functions extracted from the right OpenGL context.
  //////////////////////////////////////////////////////////////////////////////
  void prepare(int _width, int _height, QOpenGLFunctions_4_1_Core *_funcs);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Draws the sky map to the default framebuffer.
  /// @param _funcs OpenGL functions extracted from the right OpenGL context.
  //////////////////////////////////////////////////////////////////////////////
  void draw(QOpenGLFunctions_4_1_Core *_funcs);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Getter of the cube map for external use.
  /// @return The cube map texture.
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLTexture *getCubeMapTexture() {return m_cubemap_texture;}

private:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Paired InputManager
  //////////////////////////////////////////////////////////////////////////////
  InputManager *m_input_manager;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief How many times to blur the image.
  //////////////////////////////////////////////////////////////////////////////
  uint m_blur_iterations;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Holds the vertex data for a big cube.
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLBuffer m_skybox_vbo;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Holds the state of big cube.
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLVertexArrayObject *m_skybox_vao;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Shader setup for drawing the cube map.
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLShaderProgram *m_sky_program;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Cubemap texture where it will sample.
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLTexture *m_cubemap_texture;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Screen drawing of the scene. It will get blurred many times.
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLTexture* m_painted_sky;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief FBO for the blurring.
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLFramebufferObject *m_fbo;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Holds the state of quad geometry.
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLVertexArrayObject *m_quad_vao;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Holds the vertex data of quad geometry.
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLBuffer m_quad_vbo;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Does the blurring on the texture that's fed in.
  //////////////////////////////////////////////////////////////////////////////
  QOpenGLShaderProgram *m_blur_program;

};

#endif // SKYBOX_H
