#ifndef INPUT_H
#define INPUT_H

/* Input helper class **/

#include <memory>


// QT
#include <QtWidgets>
#include <QVector3D>
#include <QtGui/QWindow>
#include <QKeyEvent>




// Custom
#include "viewport.h" // Include viewport to get key/mouse inputs
#include "selectobject.h"
//#include "camera.h"
#include "arcball.h"





class InputManager
{

public:
    InputManager (QWindow *_window);
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////* Calculate mouse click release */
    void mouseReleaseEvent(QMouseEvent *event);  /////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////* Run on mouse down */
    void mousePressEvent(QMouseEvent *event);   //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void mouseMoveEvent(QMouseEvent *event);
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief onKeyPress
    /// \param key
    ////* Processes key press input */
    void keyPressEvent(QKeyEvent *key);   ////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief onKeyRelease
    /// \param key
    ////* Processes key release */
    void keyReleaseEvent(QKeyEvent *key);  ///////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief wheelEvent
    /// \param event
    ////* Processes wheel events*/
    void wheelEvent(QWheelEvent *event);  ///////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////* Run Hover function for all objects currently under the mouse cursor  */
    void onHover();
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// /// \brief Moves/alters the camera positions based on user input
    /// \param key
    ////* Moves/alters the camera positions based on user input */
    void doMovement();    ////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief getUniqueColour
    /// \param _x
    /// \param _y
    /// \param m_manipulatorProgram
    ////* Gets the unique colour at a given screen coordinate. This is the
    /// value written with drawBackBuffer in the SelectObject. */
    void getUniqueColour(const int _x, const int _y, QOpenGLShaderProgram* m_manipulatorProgram);   //////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief doSelection
    /// \param _x
    /// \param _y
    ////* Runs getUniqueColour and compares them to the object unique colours. Any matching object is set to
    /// clicked*/
    void doSelection(const int _x, const int _y);   //////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief addShaderProgram
    /// \param _program
    ////* Add another shader program to the input manager. These are used to calculate camera movement and
    /// to get unique colours */
    void addShaderProgram(QOpenGLShaderProgram* _program);
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief setupCamera
    ////* Setup main camera */
    void setupCamera();
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief getQMAtrix
    /// \param mat
    /// \return
    ////* Simple translaton function for glm mat4 to QMatrix4x4. This will probably be removed in final version. */
    //QMatrix4x4 getQMAtrix(glm::mat4 mat);
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief setObjectList
    /// \param _objectList
    ////* Load the list of objects to the input manager. This is used to calculate camera model matrixes
    /// and object inputs. */
    void setObjectList(std::vector<std::shared_ptr<SelectObject>> _objectList) { objectList=_objectList; }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief getCurrentUniqueColour
    /// \return
    ////* Gives the value of the current unique colour variable. */
    QVector3D getCurrentUniqueColour() { return currentUniqueColour; }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief setCurrentUniqueColour
    /// \param uc
    ////* Sets the value of the current unique colour variable. */
    void setCurrentUniqueColour(QVector3D uc) { currentUniqueColour=uc; }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////



private:
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief currentUniqueColour
    ////* Value storing the current unique colour. This is being used throughout the class
    /// and is made global to not have to be recalculated.  */
    QVector3D currentUniqueColour;
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    QWindow *mWindow;
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief camera
    /// /* Main scene camera. This should not leave the class. */
    ArcBallCamera camera;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief view
    ////* Scene view matrix */
    QMatrix4x4 view;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief projection
    ////* Scene projection matrix */
    QMatrix4x4 projection;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief programs
    ////* Vector of shader programs */
    std::vector<QOpenGLShaderProgram*> programs;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief objectList
    ////* Vector of selectobjects in the scene. */
    std::vector<std::shared_ptr<SelectObject>> objectList;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief keys
    ////* Array of bools stating which buttons are currently pressed. */
    bool keys[1024];
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief alt_key
    ////* Because of issues with the alt key, it has its own variable (alt=special snowflake) */
    bool alt_key=false;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief mousePressed
    ////* Variable stating wether or not the mouse is currently pressed */
    bool mousePressed;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief lastX, lastY
    ////* GLfloat storing last position for screen x and y. */
    GLfloat lastX = 400, lastY = 300;   ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief clickZ
    ////* Z position of clicked item
    ///   A global variable to make sure the z position is only gotten on mouse click
    ///   not mouse down (continous) */
    GLfloat clickZ;  ///////////////////////////////////////////////////////////////////////////////////////////////////



};

#endif




