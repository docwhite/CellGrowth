#ifndef INPUT_H
#define INPUT_H

/* Input helper class **/

#include <memory>


// QT
#include <QVector3D>
#include <QtGui/QWindow>
#include <QKeyEvent>
#include <QMatrix4x4>




// Custom
#include "selectobject.h"
#include "arcball.h"
#include "pointlight.h"




////////////////////////////////////////////////////////////////////////////////
/// @file input.h
/// @author Glenn Nygard
/// @version 0.0.1
/// @class InputManager
/// @brief Deals with inputs, and diverts them to the appropriate classes.
///
/// This class will mainly be dealing with movement and updates caused by user
/// input. It will maintain the Camera class and divert inputs to that, or to
/// SelectObject instances in the scene.
////////////////////////////////////////////////////////////////////////////////
class InputManager
{

public:
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Custom constructor taking a QWindow.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  InputManager (QWindow *_window);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Calculate mouse click release
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void mouseReleaseEvent(QMouseEvent *event);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Processes the mouse down event.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void mousePressEvent(QMouseEvent *event);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Processes the mouse movements.
  /// \param event
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void mouseMoveEvent(QMouseEvent *event);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Processes key press input
  /// \param key
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void keyPressEvent(QKeyEvent *key);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Processes key release
  /// \param key
  /// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void keyReleaseEvent(QKeyEvent *key);  ///////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Processes wheel events.
  /// \param event
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void wheelEvent(QWheelEvent *event);  ////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Run Hover function for all objects currently under the mouse cursor
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void onHover();

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Moves/alters the camera positions based on user input
  /// \param key
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void doMovement();

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Gets the unique colour at a given screen coordinate. This is the
  /// value written with drawBackBuffer in the SelectObject.
  /// \param _x
  /// \param _y
  /// \param m_manipulatorProgram
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void getUniqueColour(const int _x, const int _y, QOpenGLShaderProgram* m_manipulatorProgram);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Runs getUniqueColour and compares them to the object unique colours. Any matching object is set to
  /// clicked
  /// \param _x
  /// \param _y
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void doSelection(const int _x, const int _y);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Add another shader program to the input manager. These are used to calculate camera movement and
  /// to get unique colours
  /// \param _program
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void addShaderProgram(QOpenGLShaderProgram* _program);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Setup main camera
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void setupCamera();

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Load the list of objects to the input manager. These are the objects that will be considered for the
  /// InputManager calculations.
  /// \param _objectList
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void setObjectList(std::vector<std::shared_ptr<SelectObject>> _objectList) { objectList=_objectList; }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Gives the value of the current unique colour variable.
  /// \return Returns the current unique colour.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QVector3D getCurrentUniqueColour() { return currentUniqueColour; }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Sets the value of the current unique colour variable.
  /// \param uc The colour to be set.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void setCurrentUniqueColour(QVector3D uc) { currentUniqueColour=uc; }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get the current projection matrix for use with other calculations.
  /// \return Returns the projection matrix.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QMatrix4x4 getProjectionMatrix() {return projection;}

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get the current view matrix for use with other calculations.
  /// \return Returns the view matrix.
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QMatrix4x4 getViewMatrix() {return view;}



private:
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Variable storing the current unique colour. This is being used throughout the class
  /// and is made global to not have to be recalculated.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QVector3D currentUniqueColour;

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QWindow *mWindow;

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Main scene camera. This should not leave the class.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ArcBallCamera camera;

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Scene view matrix
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QMatrix4x4 view;

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Scene projection matrix.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  QMatrix4x4 projection;

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Vector of shader programs.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  std::vector<QOpenGLShaderProgram*> programs;

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Vector of selectobjects in the scene.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  std::vector<std::shared_ptr<SelectObject>> objectList;

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Array of bools stating which buttons are currently pressed.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  bool keys[1024];

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Because of issues with the alt key, it has its own variable (alt=special snowflake).
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  bool alt_key=false;

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Variable stating wether or not the mouse is currently pressed.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  bool mousePressed;

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief GLfloat storing last position for screen x.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  GLfloat lastX = 400;

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief GLfloat storing last position for screen y.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  GLfloat lastY = 300;

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Z position of clicked item. A global variable to make sure the z position is only gotten on mouse click,
  ///   not mouse down (continous)
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  GLfloat clickZ;



};

#endif




